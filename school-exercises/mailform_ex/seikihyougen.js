//リテラル

const pattern = /abc/;

// このようにスラッシュ / で囲んで記述します。
// 上記は「abc という文字列にマッチするパターン」です。

// コンストラクタ

const str = "abc";
const pattern2 = new RegExp(str); // /abc/ と同じ意味

// 変数から正規表現を組み立てるときはこちらを使います。

// 正規表現の使いかた（メソッド）

// | `test()` | 文字列がパターンに一致するかを調べる | `/abc/.test("abc") → true` |
// | `match()` | 一致する文字列を配列で返す | `"abc123".match(/\d+/)` |
// | `replace()` | 一致した部分を別の文字に置換 | `"abc".replace(/a/, "z")` |
// | `split()` | パターンで区切って配列に分割 | `"a,b,c".split(/,/)` |

// よく使う特殊文字（メタキャラクター）

// | .　 | 任意の1文字 | `/a.c/` → "abc", "a3c" など |
// | ^ 　| 行の先頭 | `/^a/` → "apple" にマッチ |
// | $　 | 行の末尾 | `/e$/` → "apple" にマッチ |
// | *　 | 0回以上の繰り返し | `/a*/` → "", "a", "aaa" など |
// |　+　| 1回以上の繰り返し | `/a+/` → "a", "aaa" など |
// | 　? | 0回または1回 | `/a?/` → "", "a" |
// |  \d | 数字1桁（0〜9）           | `/\d/` → "5" など |
// |  \w | 単語構成文字（英数字＋_） | `/\w/` → "a", "3", "_" |
// | [abc] | a または b または c | `/[abc]/` → "a", "b", "c" |
// | [^abc]| a, b, c以外 | `/[^abc]/` → "d" など |
// | (abc) | グループ化 | `/(ab)+/` → "abab" など |
// |  {n}  | n回ちょうど | `/a{3}/` → "aaa" |
// | {n,}  | n回以上 | `/a{2,}/` → "aa", "aaaa" |
// | {n,m} | n〜m回 | `/a{2,4}/` → "aa", "aaa" |

// フラグ

// | `g` | global | 全体検索（すべての一致を探す）
// | `i` | ignoreCase | 大文字と小文字を区別しない
// | `m` | multiline | 複数行モード（^ や$が行ごとに機能する）   